#include <iostream>
#include <queue>
#include <condition_variable>
#include <thread>
#include <mutex>
#include <string>
 
using namespace std;
queue<long> dataQ; 
mutex pc_mu, print_mu;
condition_variable cond_wait; 
void Print(string str)
{
	lock_guard<mutex> lg(print_mu); 
	cout << str << endl;
}
 
void Producer()
{
	int index = 0;
	while (1)
	{
		unique_lock<mutex> ul(pc_mu);
		if (dataQ.size() >= 5) 
		{
			cond_wait.wait(ul, []() {return !(dataQ.size() >= 5); });
		}
		dataQ.push(index);
		ul.unlock(); 
		cond_wait.notify_one();
		this_thread::sleep_for(chrono::milliseconds(100));
		Print(" Producer produced " + to_string(index));
		index++;
	}
}
void Consumer()
{
	while (1)
	{
		unique_lock<mutex> ul(pc_mu);
		if (dataQ.empty())
		{
			cond_wait.wait(ul, []() {return !dataQ.empty(); }); 
		}
 
		ul.unlock();
		int element = dataQ.front();
		dataQ.pop();
		cond_wait.notify_one();
		this_thread::sleep_for(chrono::milliseconds(1000)); 
		Print(" Consumer got " + to_string(element));
	}
}
int main()
{
	thread prod(Producer);
	thread cons(Consumer);
 
	prod.detach();
	cons.detach();
	while (1); 
}
